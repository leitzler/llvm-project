name: Release Task

permissions:
  contents: read

on:
  workflow_dispatch
#  push:

#    tags:
      # The regex support here is limited, so just match everything that starts with llvmorg- and filter later.
#      - 'llvmorg-*'

jobs:
  release-tasks:
    permissions:
      contents: write # To upload assets to release.
    runs-on: ubuntu-latest
    if: github.repository == 'llvm/llvm-project'
    outputs:
      release-version: ${{ steps.validate-tag.outputs.release-version }}
    steps:
      - name: Validate Tag
        id: validate-tag
        run: |
#          test "${{ github.actor }}" = "tstellar" || test "${{ github.actor }}" = "tru"
#          echo "${{ github.ref_name }}" | grep -e '^llvmorg-[0-9]\+\.[0-9]\+\.[0-9]\+\(-rc[0-9]\+\)\?$'
#          release_version=$(echo "${{ github.ref_name }}" | sed 's/llvmorg-//g')
          echo "release-version=17.0.2" >> "$GITHUB_OUTPUT"

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
              python3-github \
              ninja-build

      - name: Checkout LLVM
        uses: actions/checkout@v4

      - name: Create Release
        run: |
          ./llvm/utils/release/./github-upload-release.py --token ${{ github.token }} --release ${{ steps.validate-tag.outputs.release-version }} create

  release-docs:
    needs: release-tasks
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
              ninja-build

      - name: Setup Python env
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Python deps
        run: |
          pip install sphinx myst-parser sphinx-automodapi furo

      - name: Build Documentation
        run: |
          ./llvm/utils/release/build-docs.sh -release ${{ needs.release-tasks.outputs.release-version }} -no-doxygen

      - name: Create Release Notes Artifact
        uses: actions/upload-artifact@v3
        with:
          name: release-notes
          path: docs-build/html-export/

  release-lit:
    runs-on: ubuntu-latest
    if: github.repository == 'llvm/llvm-project'
    steps:
      - name: Checkout LLVM
        uses: actions/checkout@v4

      - name: Install dependencies
        run: sudo apt-get install -y python3-setuptools

      - name: Test lit
        run: |
          cd llvm/utils/lit
          python3 lit.py tests

      - name: Package lit
        run: |
          cd llvm/utils/lit
          # Remove 'dev' suffix from lit version.
          sed -i "s/ + 'dev'//g" lit/__init__.py
          python3 setup.py sdist

      - name: Upload lit to test.pypi.org
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.LLVM_LIT_TEST_PYPI_API_TOKEN }}
          repository-url: https://test.pypi.org/legacy/

      - name: Upload lit to pypi.org
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.LLVM_LIT_PYPI_API_TOKEN }}
